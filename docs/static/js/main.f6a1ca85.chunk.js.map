{"version":3,"sources":["utils/utils.ts","components/AvailabilityLabel.tsx","components/About.tsx","components/IngredientWithAvailability.tsx","components/AllIngredients.tsx","components/Alternatives.tsx","components/CocktailCard.tsx","components/CocktailsTable.tsx","utils/searchLogic.ts","components/SearchBar.tsx","components/CocktailsSearch.tsx","components/App.tsx","utils/storage.ts","index.tsx"],"names":["DISCREET","domain","split","reverse","join","flattenIngredientName","ingredientNameWithLinks","map","part","text","AvailabilityLabel","availability","onClick","style","padding","margin","borderRadius","color","cursor","backgroundColor","undefined","translateAvailabilityAsColor","About","IngredientWithAvailability","ingredientName","setIngredientAvailability","incrementAvailability","useCallback","textDecoration","i","href","AllIngredients","cocktails","ingredientsAvailability","names","frequenciesMap","forEach","c","ingredients","jsonStr","JSON","stringify","Object","keys","sort","a","b","_","parse","buildList","name","flattenedName","Alternatives","alternatives","length","CocktailCard","cocktail","maxWidth","background","height","float","src","imgSrc","alt","fontSize","marginLeft","url","target","rel","amount","alternateIngredientsNames","CocktailsTable","width","display","flexFlow","justifyContent","parseSpacedStr","s","trim","toLowerCase","filter","useInputTextSetup","useState","value","setValue","e","useInputCheckboxSetup","checked","SearchBar","setSearchResults","includeStr","includeStrOnChange","excludeStr","excludeStrOnChange","excludeNo","setExcludeNo","excludeMaybe","setExcludeMaybe","onSubmit","preventDefault","searchCriteria","includes","excludes","ingredientNames","some","every","word","performSearch","border","paddingTop","top","gap","minWidth","type","onChange","placeholder","id","htmlFor","CocktailsSearch","searchResults","PageLink","page","label","setPage","goTo","active","fontWeight","App","localStorage","getItem","setIngredientsAvailability","newMap","setTimeout","setItem","persistIngredientsAvailability","db","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6a1ca85.chunk.js","sourcesContent":["import { Availability, Ingredient } from \"./types\";\n\nexport const DISCREET = false;\n\nexport function translateAvailabilityAsColor(availability: Availability) {\n  switch (availability) {\n    case \"no\":\n      return \"red\";\n    case \"maybe\":\n      return \"orange\";\n    case \"yes\":\n      return \"green\";\n    case null:\n    case undefined:\n      return \"gray\";\n  }\n}\n\nfunction reverse(s: string) {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n// eslint-disable-next-line no-useless-concat\nexport const domain = reverse(\"apliatkcoc\") + \"rtyapp.com\";\n\nexport function flattenIngredientName(\n  ingredientNameWithLinks: Ingredient[\"ingredientNameWithLinks\"]\n) {\n  return ingredientNameWithLinks\n    .map((part) => {\n      if (typeof part === \"string\") {\n        return part;\n      } else {\n        return part.text;\n      }\n    })\n    .join(\" \");\n}\n","import React from \"react\";\nimport { Availability } from \"../utils/types\";\n\nexport function AvailabilityLabel({\n  availability,\n  onClick = () => {},\n}: {\n  availability: Availability | null;\n  onClick?: () => void;\n}) {\n  function translateAvailabilityAsColor() {\n    switch (availability) {\n      case \"no\":\n        return \"red\";\n      case \"maybe\":\n        return \"orange\";\n      case \"yes\":\n        return \"green\";\n      case null:\n      case undefined:\n        return \"gray\";\n    }\n  }\n\n  return (\n    <span\n      style={{\n        padding: \"0 5px\",\n        margin: \"0 5px\",\n        borderRadius: \"5px\",\n        color: \"white\",\n        cursor: \"pointer\",\n        backgroundColor: translateAvailabilityAsColor(),\n      }}\n      onClick={onClick}\n    >\n      {availability || \"???\"}\n    </span>\n  );\n}\n","import React from \"react\";\nimport { AvailabilityLabel } from \"./AvailabilityLabel\";\n\nexport function About() {\n  return (\n    <div\n      style={{\n        padding: \"8px\",\n      }}\n    >\n      <p>\n        I made this tool to search a database of cocktails, to quickly find\n        interesting recipes based on the bottles and ingredients I have at the\n        moment.\n      </p>\n      <p>\n        How it works : by clicking on the button\n        <AvailabilityLabel availability={null} />\n        next to an ingredient you can mark it as\n        <AvailabilityLabel availability=\"yes\" />\n        (you have it in your cupboard),\n        <AvailabilityLabel availability=\"maybe\" />\n        (you might find it at the store), or\n        <AvailabilityLabel availability=\"no\" /> (you will never buy it). Then\n        you can use the search box to use those as criteria.\n      </p>\n      <p>\n        By default all ingredients are marked as\n        <AvailabilityLabel availability={null} />\n        so it might take a while before the data becomes really useful.\n      </p>\n      <p>The data was scraped from another website (shhh!).</p>\n    </div>\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { Availability, AvailabilitySetter, Ingredient } from \"../utils/types\";\nimport { domain } from \"../utils/utils\";\nimport { AvailabilityLabel } from \"./AvailabilityLabel\";\n\nexport function IngredientWithAvailability({\n  ingredientName,\n  ingredientNameWithLinks,\n  availability,\n  setIngredientAvailability,\n}: {\n  ingredientName: string;\n  ingredientNameWithLinks: Ingredient[\"ingredientNameWithLinks\"];\n  availability: Availability;\n  setIngredientAvailability: AvailabilitySetter;\n}) {\n  function translateAvailabilityAsColor() {\n    switch (availability) {\n      case \"no\":\n        return \"red\";\n      case \"maybe\":\n        return \"orange\";\n      case \"yes\":\n        return \"green\";\n      case null:\n      case undefined:\n        return \"gray\";\n    }\n  }\n\n  const incrementAvailability = useCallback(() => {\n    const newAvailability =\n      availability === \"no\" ? \"maybe\" : availability === \"maybe\" ? \"yes\" : \"no\";\n    setIngredientAvailability(ingredientName, newAvailability);\n  }, [ingredientName, availability, setIngredientAvailability]);\n\n  function buildIngredientUrl(href: string) {\n    return `https://${domain}${href}`;\n  }\n\n  return (\n    <span\n      style={{\n        textDecoration: availability === \"no\" ? \"line-through\" : \"initial\",\n      }}\n    >\n      {ingredientNameWithLinks.map((part, i) => {\n        const style = { margin: \"0 2px\" };\n        if (typeof part === \"string\") {\n          return (\n            <span style={style} key={part + i}>\n              {part}\n            </span>\n          );\n        }\n        return (\n          <a\n            style={style}\n            key={part.text + i}\n            href={buildIngredientUrl(part.href)}\n          >\n            {part.text}\n          </a>\n        );\n      })}\n      <AvailabilityLabel\n        availability={availability}\n        onClick={incrementAvailability}\n      />\n    </span>\n  );\n}\n","import React from \"react\";\nimport {\n  AvailabilitiesMap,\n  Availability,\n  Cocktail,\n  Ingredient,\n  IngredientName,\n} from \"../utils/types\";\nimport { flattenIngredientName } from \"../utils/utils\";\nimport { IngredientWithAvailability } from \"./IngredientWithAvailability\";\n\nfunction buildList(cocktails: Cocktail[]): IngredientName[] {\n  const frequenciesMap: {\n    [jsonStr: string]: number;\n  } = {};\n  cocktails.forEach((c) =>\n    c.ingredients.forEach((i) => {\n      const jsonStr = JSON.stringify(i.ingredientNameWithLinks);\n      frequenciesMap[jsonStr] = (frequenciesMap[jsonStr] || 0) + 1;\n    })\n  );\n  const allNames = Object.keys(frequenciesMap);\n  return allNames\n    .sort((a, b) => frequenciesMap[b] - frequenciesMap[a])\n    .map((_) => JSON.parse(_));\n}\n\nfunction listAllIngredientsSortedByFrequency(cocktails: Cocktail[]): string[] {\n  const frequenciesMap: {\n    [k: string]: number;\n  } = {};\n  cocktails.forEach((c) =>\n    c.ingredients.forEach((i) => {\n      const name = flattenIngredientName(i.ingredientNameWithLinks);\n      frequenciesMap[name] = (frequenciesMap[name] || 0) + 1;\n    })\n  );\n  const allNames = Object.keys(frequenciesMap);\n  return allNames.sort((a, b) => frequenciesMap[b] - frequenciesMap[a]);\n}\n\nexport function AllIngredients({\n  cocktails,\n  setIngredientAvailability,\n  ingredientsAvailability,\n}: {\n  cocktails: Cocktail[];\n  setIngredientAvailability: (\n    ingredientName: string,\n    availability: Availability\n  ) => void;\n  ingredientsAvailability: AvailabilitiesMap;\n}) {\n  const names = buildList(cocktails);\n\n  return (\n    <ul>\n      {names.map((name) => {\n        const flattenedName = flattenIngredientName(name);\n        return (\n          <li key={flattenedName}>\n            <IngredientWithAvailability\n              ingredientName={flattenedName}\n              ingredientNameWithLinks={name}\n              availability={ingredientsAvailability[flattenedName]}\n              setIngredientAvailability={setIngredientAvailability}\n            />\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import React from \"react\";\n\nexport function Alternatives({ alternatives }: { alternatives: string[] }) {\n  if (alternatives.length) {\n    return (\n      <span style={{ color: \"grey\" }}> (or {alternatives.join(\"/\")})</span>\n    );\n  }\n  return null;\n}\n","import React from \"react\";\nimport {\n  AvailabilitiesMap,\n  AvailabilitySetter,\n  Cocktail,\n} from \"../utils/types\";\nimport { DISCREET, domain, flattenIngredientName } from \"../utils/utils\";\nimport { Alternatives } from \"./Alternatives\";\nimport { IngredientWithAvailability } from \"./IngredientWithAvailability\";\n\nexport function CocktailCard({\n  cocktail,\n  ingredientsAvailability,\n  setIngredientAvailability,\n}: {\n  cocktail: Cocktail;\n  ingredientsAvailability: AvailabilitiesMap;\n  setIngredientAvailability: AvailabilitySetter;\n}) {\n  return (\n    <div\n      style={{\n        maxWidth: \"500px\",\n        background: \"#FFE\",\n        padding: \"5px\",\n        margin: \"5px\",\n      }}\n    >\n      <img\n        style={{ height: DISCREET ? \"1rem\" : \"4rem\", float: \"right\" }}\n        src={`https://${domain}/${cocktail.imgSrc}`}\n        alt=\"\"\n      />\n      <h4\n        style={{\n          margin: 0,\n          ...(DISCREET ? { fontSize: \"1rem\", fontWeight: \"normal\" } : null),\n        }}\n      >\n        {cocktail.name}\n        <a\n          style={{ fontSize: \"0.9rem\", marginLeft: \"5px\" }}\n          href={`https://${domain}${cocktail.url}`}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          link\n        </a>\n      </h4>\n\n      <ul>\n        {cocktail.ingredients.map(\n          ({ amount, ingredientNameWithLinks, alternateIngredientsNames }) => {\n            const ingredientName = flattenIngredientName(\n              ingredientNameWithLinks\n            );\n            return (\n              <li key={ingredientName}>\n                {amount}{\" \"}\n                <IngredientWithAvailability\n                  ingredientName={ingredientName}\n                  ingredientNameWithLinks={ingredientNameWithLinks}\n                  availability={ingredientsAvailability[ingredientName]}\n                  setIngredientAvailability={setIngredientAvailability}\n                />\n                <Alternatives alternatives={alternateIngredientsNames} />\n              </li>\n            );\n          }\n        )}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  AvailabilitiesMap,\n  AvailabilitySetter,\n  Cocktail,\n} from \"../utils/types\";\nimport { CocktailCard } from \"./CocktailCard\";\n\nexport function CocktailsTable({\n  cocktails,\n  ingredientsAvailability,\n  setIngredientAvailability,\n}: {\n  cocktails: Cocktail[];\n  ingredientsAvailability: AvailabilitiesMap;\n  setIngredientAvailability: AvailabilitySetter;\n}) {\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        display: \"flex\",\n        flexFlow: \"row wrap\",\n        justifyContent: \"flex-start\",\n      }}\n    >\n      {cocktails.map((cocktail) => {\n        return (\n          <CocktailCard\n            key={cocktail.name}\n            cocktail={cocktail}\n            ingredientsAvailability={ingredientsAvailability}\n            setIngredientAvailability={setIngredientAvailability}\n          />\n        );\n      })}\n    </div>\n  );\n}\n","import { AvailabilitiesMap, Cocktail } from \"./types\";\nimport { flattenIngredientName } from \"./utils\";\n\nfunction parseSpacedStr(s: string) {\n  return s\n    .trim()\n    .toLowerCase()\n    .split(\" \")\n    .filter((_) => _.trim().length);\n}\n\nexport function performSearch({\n  cocktails,\n  ingredientsAvailability,\n  searchCriteria,\n}: {\n  cocktails: Cocktail[];\n  ingredientsAvailability: AvailabilitiesMap;\n  searchCriteria: {\n    includeStr: string;\n    excludeStr: string;\n    excludeNo: boolean;\n    excludeMaybe: boolean;\n  };\n}): Cocktail[] {\n  const { includeStr, excludeStr, excludeNo, excludeMaybe } = searchCriteria;\n  const includes = parseSpacedStr(includeStr);\n  const excludes = parseSpacedStr(excludeStr);\n  return cocktails.filter(({ ingredients }) => {\n    const ingredientNames = ingredients.map((_) =>\n      flattenIngredientName(_.ingredientNameWithLinks)\n    );\n\n    if (\n      excludeNo &&\n      ingredientNames.some((name) => ingredientsAvailability[name] === \"no\")\n    ) {\n      return false;\n    }\n    if (\n      excludeMaybe &&\n      ingredientNames.some((name) => ingredientsAvailability[name] === \"maybe\")\n    ) {\n      return false;\n    }\n    if (\n      includes.length &&\n      !includes.every((word) =>\n        ingredientNames.some((name) => name.toLowerCase().includes(word))\n      )\n    ) {\n      return false;\n    }\n    if (\n      excludes.length &&\n      !excludes.every((word) =>\n        ingredientNames.every((name) => !name.toLowerCase().includes(word))\n      )\n    ) {\n      return false;\n    }\n    return true;\n  });\n}\n","import React, { useCallback, useState } from \"react\";\nimport { performSearch } from \"../utils/searchLogic\";\nimport { AvailabilitiesMap, Cocktail } from \"../utils/types\";\nimport { DISCREET } from \"../utils/utils\";\n\nfunction useInputTextSetup() {\n  const [value, setValue] = useState<string>(\"\");\n  const onChange = useCallback((e) => {\n    setValue(e.target.value);\n  }, []);\n  return [value, onChange] as const;\n}\n\nfunction useInputCheckboxSetup() {\n  const [value, setValue] = useState<boolean>(false);\n  const onChange = useCallback((e) => {\n    setValue(e.target.checked);\n  }, []);\n  return [value, onChange] as const;\n}\n\nexport function SearchBar({\n  cocktails,\n  setSearchResults,\n  ingredientsAvailability,\n}: {\n  cocktails: Cocktail[];\n  setSearchResults: (res: Cocktail[]) => void;\n  ingredientsAvailability: AvailabilitiesMap;\n}) {\n  const [includeStr, includeStrOnChange] = useInputTextSetup();\n  const [excludeStr, excludeStrOnChange] = useInputTextSetup();\n  const [excludeNo, setExcludeNo] = useInputCheckboxSetup();\n  const [excludeMaybe, setExcludeMaybe] = useInputCheckboxSetup();\n\n  const onSubmit = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      setSearchResults(\n        performSearch({\n          cocktails,\n          ingredientsAvailability,\n          searchCriteria: {\n            includeStr,\n            excludeStr,\n            excludeNo,\n            excludeMaybe,\n          },\n        })\n      );\n    },\n    [\n      ingredientsAvailability,\n      cocktails,\n      excludeMaybe,\n      excludeNo,\n      excludeStr,\n      includeStr,\n      setSearchResults,\n    ]\n  );\n\n  return (\n    <div\n      style={{\n        border: \"2px dashed gray\",\n        padding: \"10px\",\n        paddingTop: \"0\",\n        margin: \"8px\",\n        top: \"10px\",\n        maxWidth: \"400px\",\n      }}\n    >\n      {DISCREET || <h5>Search filters</h5>}\n\n      <form\n        style={{\n          display: \"flex\",\n          flexFlow: \"column\",\n          gap: \"10px\",\n          minWidth: \"400px\",\n        }}\n        onSubmit={onSubmit}\n      >\n        <input\n          type=\"text\"\n          onChange={includeStrOnChange}\n          value={includeStr}\n          placeholder=\"required ingredients (use spaces as a delimiter)\"\n        />\n\n        <input\n          type=\"text\"\n          onChange={excludeStrOnChange}\n          value={excludeStr}\n          placeholder=\"ingredients to exclude (use spaces as a delimiter)\"\n        />\n\n        <div>\n          <input\n            type=\"checkbox\"\n            checked={excludeNo}\n            onChange={setExcludeNo}\n            id=\"exclude_no\"\n          />\n          <label htmlFor=\"exclude_no\">\n            Exclude cocktails with ingredients marked \"no\"\n          </label>\n        </div>\n\n        <div>\n          <input\n            type=\"checkbox\"\n            checked={excludeMaybe}\n            onChange={setExcludeMaybe}\n            id=\"exclude_maybe\"\n          />\n          <label htmlFor=\"exclude_maybe\">\n            Exclude cocktails with ingredients marked \"maybe\"\n          </label>\n        </div>\n\n        <button type=\"submit\">Search</button>\n      </form>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { AvailabilitiesMap, Availability, Cocktail } from \"../utils/types\";\nimport { CocktailsTable } from \"./CocktailsTable\";\nimport { SearchBar } from \"./SearchBar\";\n\nexport function CocktailsSearch({\n  cocktails,\n  setIngredientAvailability,\n  ingredientsAvailability,\n}: {\n  cocktails: Cocktail[];\n  setIngredientAvailability: (\n    ingredientName: string,\n    availability: Availability\n  ) => void;\n  ingredientsAvailability: AvailabilitiesMap;\n}) {\n  const [searchResults, setSearchResults] = useState<Cocktail[]>(cocktails);\n\n  return (\n    <div>\n      <SearchBar\n        {...{ cocktails, ingredientsAvailability, setSearchResults }}\n      />\n      <CocktailsTable\n        cocktails={searchResults}\n        {...{\n          ingredientsAvailability,\n          setIngredientAvailability,\n        }}\n      />\n    </div>\n  );\n}\n","import React, { useCallback, useState } from \"react\";\nimport db from \"../db.json\";\nimport {\n  persistIngredientsAvailability,\n  readIngredientsAvailabilityFromPersistence,\n} from \"../utils/storage\";\nimport { AvailabilitiesMap, Availability, Cocktail } from \"../utils/types\";\nimport { DISCREET } from \"../utils/utils\";\nimport { About } from \"./About\";\nimport { AllIngredients } from \"./AllIngredients\";\nimport { CocktailsSearch } from \"./CocktailsSearch\";\n\ntype Page = \"cocktailssearch\" | \"allingredients\" | \"about\";\n/* eslint-disable jsx-a11y/anchor-is-valid */\n\nfunction PageLink({\n  target,\n  page,\n  label,\n  setPage,\n}: {\n  target: Page;\n  page: Page;\n  label: string;\n  setPage: (p: Page) => void;\n}) {\n  const goTo = useCallback(() => {\n    setPage(target);\n  }, [setPage, target]);\n\n  const active = page === target;\n  return (\n    <a\n      onClick={goTo}\n      href=\"#\"\n      style={{\n        margin: \"0 10px\",\n        // textDecoration: active ? \"none\" : \"underline\",\n        fontWeight: active ? \"bold\" : \"normal\",\n      }}\n    >\n      {label}\n    </a>\n  );\n}\n\nfunction App() {\n  const [page, setPage] = useState<Page>(\"cocktailssearch\");\n  const [ingredientsAvailability, setIngredientsAvailability] =\n    useState<AvailabilitiesMap>(readIngredientsAvailabilityFromPersistence());\n\n  const setIngredientAvailability = useCallback(\n    (ingredientName: string, availability: Availability) => {\n      const newMap = {\n        ...ingredientsAvailability,\n        [ingredientName]: availability,\n      };\n      setIngredientsAvailability(newMap);\n      setTimeout(() => {\n        persistIngredientsAvailability(newMap);\n      }, 50);\n    },\n    [ingredientsAvailability]\n  );\n  const cocktails = db as Cocktail[];\n\n  return (\n    <div>\n      <PageLink\n        {...{\n          page,\n          target: \"cocktailssearch\",\n          label: \"Cocktails\",\n          setPage,\n        }}\n      />\n      <PageLink\n        {...{\n          page,\n          target: \"allingredients\",\n          label: \"Ingredients\",\n          setPage,\n        }}\n      />\n      <PageLink\n        {...{\n          page,\n          target: \"about\",\n          label: \"About\",\n          setPage,\n        }}\n      />\n      {page === \"cocktailssearch\" ? (\n        <CocktailsSearch\n          {...{ cocktails, setIngredientAvailability, ingredientsAvailability }}\n        />\n      ) : page === \"allingredients\" ? (\n        <AllIngredients\n          {...{ cocktails, setIngredientAvailability, ingredientsAvailability }}\n        />\n      ) : (\n        <About />\n      )}\n    </div>\n  );\n}\nif (DISCREET) {\n  document.body.style.background = \"white\";\n}\n\nexport default App;\n","import { AvailabilitiesMap } from \"./types\";\n\nexport function persistIngredientsAvailability(\n  ingredientsAvailability: AvailabilitiesMap\n) {\n  localStorage.setItem(\n    \"availabilities\",\n    JSON.stringify(ingredientsAvailability)\n  );\n}\n\nexport function readIngredientsAvailabilityFromPersistence(): AvailabilitiesMap {\n  return JSON.parse(localStorage.getItem(\"availabilities\") || \"{}\");\n}\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/style.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}