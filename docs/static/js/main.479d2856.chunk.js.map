{"version":3,"sources":["utils/utils.ts","components/variousComponents.tsx","components/App.tsx","index.tsx"],"names":["domain","split","reverse","join","Alternatives","alternatives","length","style","color","CocktailCard","cocktail","ingredientsAvailability","setIngredientAvailability","maxWidth","background","padding","margin","height","float","src","imgSrc","alt","name","fontSize","marginLeft","href","url","target","rel","ingredients","map","amount","ingredientName","alternateIngredientsNames","IngredientWithAvailability","availability","incrementAvailability","useCallback","replace","textDecoration","borderRadius","cursor","backgroundColor","undefined","translateAvailabilityAsColor","onClick","SettingsOverlay","ingredientsFilterMode","setIngredientsFilterMode","position","top","right","value","onChange","e","CocktailsTable","cocktails","filter","every","BigAppWrapper","useState","JSON","parse","localStorage","getItem","setIngredientsAvailability","newMap","setTimeout","setItem","stringify","persistIngredientsAvailability","App","db","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.479d2856.chunk.js","sourcesContent":["import { Availability } from \"./types\";\n\nexport function translateAvailabilityAsColor(availability: Availability) {\n  switch (availability) {\n    case \"no\":\n      return \"red\";\n    case \"maybe\":\n      return \"orange\";\n    case \"yes\":\n      return \"green\";\n    case null:\n    case undefined:\n      return \"gray\";\n  }\n}\n\nfunction reverse(s: string) {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n// eslint-disable-next-line no-useless-concat\nexport const domain = reverse(\"apliatkcoc\") + \"rtyapp.com\";\n","import React, { useCallback, useState } from \"react\";\nimport {\n  AvailabilitiesMap,\n  Availability,\n  AvailabilitySetter,\n  Cocktail,\n  FilterMode,\n  FilterModeSetter,\n} from \"../utils/types\";\nimport { domain } from \"../utils/utils\";\n\nexport function Alternatives({ alternatives }: { alternatives: string[] }) {\n  if (alternatives.length) {\n    return (\n      <span style={{ color: \"grey\" }}> (or {alternatives.join(\"/\")})</span>\n    );\n  }\n  return null;\n}\n\nfunction CocktailCard({\n  cocktail,\n  ingredientsAvailability,\n  setIngredientAvailability,\n}: {\n  cocktail: Cocktail;\n  ingredientsAvailability: AvailabilitiesMap;\n  setIngredientAvailability: AvailabilitySetter;\n}) {\n  return (\n    <div\n      style={{\n        maxWidth: \"500px\",\n        background: \"#FFE\",\n        padding: \"5px\",\n        margin: \"5px\",\n      }}\n    >\n      <img\n        style={{ height: \"4rem\", float: \"right\" }}\n        src={`https://${domain}/${cocktail.imgSrc}`}\n        alt=\"\"\n      />\n      <h2 style={{ margin: 0 }}>\n        {cocktail.name}\n        <a\n          style={{ fontSize: \"0.9rem\", marginLeft: \"5px\" }}\n          href={`https://${domain}${cocktail.url}`}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          link\n        </a>\n      </h2>\n\n      <ul>\n        {cocktail.ingredients.map(\n          ({ amount, ingredientName, alternateIngredientsNames }) => {\n            return (\n              <li key={ingredientName}>\n                {amount}{\" \"}\n                <IngredientWithAvailability\n                  ingredientName={ingredientName}\n                  availability={ingredientsAvailability[ingredientName]}\n                  setIngredientAvailability={setIngredientAvailability}\n                />\n                <Alternatives alternatives={alternateIngredientsNames} />\n              </li>\n            );\n          }\n        )}\n      </ul>\n    </div>\n  );\n}\n\nfunction IngredientWithAvailability({\n  ingredientName,\n  availability,\n  setIngredientAvailability,\n}: {\n  ingredientName: string;\n  availability: Availability;\n  setIngredientAvailability: AvailabilitySetter;\n}) {\n  function translateAvailabilityAsColor() {\n    switch (availability) {\n      case \"no\":\n        return \"red\";\n      case \"maybe\":\n        return \"orange\";\n      case \"yes\":\n        return \"green\";\n      case null:\n      case undefined:\n        return \"gray\";\n    }\n  }\n\n  const incrementAvailability = useCallback(() => {\n    const newAvailability =\n      availability === \"no\" ? \"maybe\" : availability === \"maybe\" ? \"yes\" : \"no\";\n    setIngredientAvailability(ingredientName, newAvailability);\n  }, [ingredientName, availability, setIngredientAvailability]);\n\n  function buildIngredientUrl() {\n    return `https://${domain}/ingredients/${ingredientName.replace(\" \", \"-\")}`;\n  }\n\n  return (\n    <span>\n      <a\n        href={buildIngredientUrl()}\n        style={{\n          textDecoration: availability === \"no\" ? \"line-through\" : \"initial\",\n        }}\n      >\n        {ingredientName}\n      </a>\n      <span\n        style={{\n          padding: \"0 5px\",\n          margin: \"0 5px\",\n          borderRadius: \"5px\",\n          color: \"white\",\n          cursor: \"pointer\",\n          backgroundColor: translateAvailabilityAsColor(),\n        }}\n        onClick={incrementAvailability}\n      >\n        {availability || \"???\"}\n      </span>\n    </span>\n  );\n}\n\nfunction SettingsOverlay({\n  ingredientsFilterMode,\n  setIngredientsFilterMode,\n}: {\n  ingredientsFilterMode: FilterMode;\n  setIngredientsFilterMode: FilterModeSetter;\n}) {\n  return (\n    <div\n      style={{\n        background: \"lightblue\",\n        padding: \"10px\",\n        position: \"fixed\",\n        top: \"10px\",\n        right: \"10px\",\n      }}\n    >\n      <h2>Settings</h2>\n\n      <h3>Filter mode</h3>\n\n      <select\n        value={ingredientsFilterMode}\n        onChange={(e) => setIngredientsFilterMode(e.target.value as FilterMode)}\n      >\n        <option value=\"all\">All cocktails</option>\n        <option value=\"only_yes\">Only with Yes</option>\n        <option value=\"yes_or_maybe\">Only with Yes or Maybe</option>\n      </select>\n    </div>\n  );\n}\n\nfunction CocktailsTable({\n  cocktails,\n  ingredientsAvailability,\n  setIngredientAvailability,\n  ingredientsFilterMode,\n}: {\n  cocktails: Cocktail[];\n  ingredientsAvailability: AvailabilitiesMap;\n  setIngredientAvailability: AvailabilitySetter;\n  ingredientsFilterMode: FilterMode;\n}) {\n  return (\n    <div>\n      {cocktails\n        .filter(({ ingredients }) => {\n          if (ingredientsFilterMode === \"all\") return true;\n          return ingredients.every(({ ingredientName }) => {\n            const availability: Availability | null =\n              ingredientsAvailability[ingredientName] || null;\n            return (\n              availability === null ||\n              availability === \"yes\" ||\n              (availability === \"maybe\" &&\n                ingredientsFilterMode === \"yes_or_maybe\")\n            );\n          });\n        })\n        .map((cocktail) => {\n          return (\n            <CocktailCard\n              key={cocktail.name}\n              cocktail={cocktail}\n              ingredientsAvailability={ingredientsAvailability}\n              setIngredientAvailability={setIngredientAvailability}\n            />\n          );\n        })}\n    </div>\n  );\n}\n\nfunction persistIngredientsAvailability(\n  ingredientsAvailability: AvailabilitiesMap\n) {\n  localStorage.setItem(\n    \"availabilities\",\n    JSON.stringify(ingredientsAvailability)\n  );\n}\n\nfunction readIngredientsAvailabilityFromPersistence(): AvailabilitiesMap {\n  return JSON.parse(localStorage.getItem(\"availabilities\") || \"{}\");\n}\n\nexport function BigAppWrapper({ cocktails }: { cocktails: Cocktail[] }) {\n  const [ingredientsAvailability, setIngredientsAvailability] =\n    useState<AvailabilitiesMap>(readIngredientsAvailabilityFromPersistence());\n  const [ingredientsFilterMode, setIngredientsFilterMode] =\n    useState<FilterMode>(\"all\");\n\n  const setIngredientAvailability = useCallback(\n    (ingredientName, availability) => {\n      const newMap = {\n        ...ingredientsAvailability,\n        [ingredientName]: availability,\n      };\n      setIngredientsAvailability(newMap);\n      setTimeout(() => {\n        persistIngredientsAvailability(newMap);\n      }, 50);\n    },\n    [ingredientsAvailability]\n  );\n\n  return (\n    <div>\n      <SettingsOverlay\n        {...{ ingredientsFilterMode, setIngredientsFilterMode }}\n      />\n      <CocktailsTable\n        cocktails={cocktails}\n        {...{\n          ingredientsAvailability,\n          setIngredientAvailability,\n          ingredientsFilterMode,\n          setIngredientsFilterMode,\n        }}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport db from \"../db.json\";\nimport { Cocktail } from \"../utils/types\";\nimport { BigAppWrapper } from \"./variousComponents\";\n\nfunction App() {\n  return (\n    <div style={{ padding: \"30px\" }}>\n      <h1>Cocktails database</h1>\n      <BigAppWrapper cocktails={db as Cocktail[]} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/style.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}