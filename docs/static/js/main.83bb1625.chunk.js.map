{"version":3,"sources":["utils/utils.ts","components/variousComponents.tsx","components/App.tsx","index.tsx"],"names":["domain","Alternatives","alternatives","length","style","color","join","CocktailCard","cocktail","ingredientsAvailability","setIngredientAvailability","height","src","imgSrc","alt","name","fontSize","marginLeft","href","url","target","rel","ingredients","map","amount","ingredientName","alternateIngredientsNames","IngredientWithAvailability","availability","incrementAvailability","useCallback","replace","textDecoration","padding","margin","borderRadius","cursor","backgroundColor","undefined","translateAvailabilityAsColor","onClick","SettingsOverlay","ingredientsFilterMode","setIngredientsFilterMode","background","position","top","right","value","onChange","e","Object","entries","CocktailsTable","cocktails","filter","every","BigAppWrapper","useState","JSON","parse","localStorage","getItem","setIngredientsAvailability","newMap","setTimeout","setItem","stringify","persistIngredientsAvailability","props","App","db","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83bb1625.chunk.js","sourcesContent":["import { Availability } from \"./types\";\n\nexport function translateAvailabilityAsColor(availability: Availability) {\n  switch (availability) {\n    case \"no\":\n      return \"red\";\n    case \"maybe\":\n      return \"orange\";\n    case \"yes\":\n      return \"green\";\n    case null:\n    case undefined:\n      return \"gray\";\n  }\n}\n\nexport const domain = \"cocktailpa\" + \"rtyapp.com\";\n","import React, { useCallback, useState } from \"react\";\nimport {\n  AvailabilitiesMap,\n  Availability,\n  AvailabilitySetter,\n  Cocktail,\n  FilterMode,\n  FilterModeSetter,\n} from \"../utils/types\";\nimport { domain } from \"../utils/utils\";\n\nexport function Alternatives({ alternatives }: { alternatives: string[] }) {\n  if (alternatives.length) {\n    return (\n      <span style={{ color: \"grey\" }}> (or {alternatives.join(\"/\")})</span>\n    );\n  }\n  return null;\n}\n\nfunction CocktailCard({\n  cocktail,\n  ingredientsAvailability,\n  setIngredientAvailability,\n}: {\n  cocktail: Cocktail;\n  ingredientsAvailability: AvailabilitiesMap;\n  setIngredientAvailability: AvailabilitySetter;\n}) {\n  return (\n    <div>\n      <h2>\n        <img\n          style={{ height: \"4rem\" }}\n          src={`https://${domain}/${cocktail.imgSrc}`}\n          alt=\"\"\n        />\n        {cocktail.name}\n        <a\n          style={{ fontSize: \"0.9rem\", marginLeft: \"5px\" }}\n          href={`https://${domain}${cocktail.url}`}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          link\n        </a>\n      </h2>\n\n      <ul>\n        {cocktail.ingredients.map(\n          ({ amount, ingredientName, alternateIngredientsNames }) => {\n            return (\n              <li key={ingredientName}>\n                {amount}{\" \"}\n                <IngredientWithAvailability\n                  ingredientName={ingredientName}\n                  availability={ingredientsAvailability[ingredientName]}\n                  setIngredientAvailability={setIngredientAvailability}\n                />\n                <Alternatives alternatives={alternateIngredientsNames} />\n              </li>\n            );\n          }\n        )}\n      </ul>\n    </div>\n  );\n}\n\nfunction IngredientWithAvailability({\n  ingredientName,\n  availability,\n  setIngredientAvailability,\n}: {\n  ingredientName: string;\n  availability: Availability;\n  setIngredientAvailability: AvailabilitySetter;\n}) {\n  function translateAvailabilityAsColor() {\n    switch (availability) {\n      case \"no\":\n        return \"red\";\n      case \"maybe\":\n        return \"orange\";\n      case \"yes\":\n        return \"green\";\n      case null:\n      case undefined:\n        return \"gray\";\n    }\n  }\n\n  const incrementAvailability = useCallback(() => {\n    const newAvailability =\n      availability === \"no\" ? \"maybe\" : availability === \"maybe\" ? \"yes\" : \"no\";\n    setIngredientAvailability(ingredientName, newAvailability);\n  }, [ingredientName, availability, setIngredientAvailability]);\n\n  function buildIngredientUrl() {\n    return `https://${domain}/ingredients/${ingredientName.replace(\" \", \"-\")}`;\n  }\n\n  return (\n    <span>\n      <a\n        href={buildIngredientUrl()}\n        style={{\n          textDecoration: availability === \"no\" ? \"line-through\" : \"initial\",\n        }}\n      >\n        {ingredientName}\n      </a>\n      <span\n        style={{\n          padding: \"0 5px\",\n          margin: \"0 5px\",\n          borderRadius: \"5px\",\n          color: \"white\",\n          cursor: \"pointer\",\n          backgroundColor: translateAvailabilityAsColor(),\n        }}\n        onClick={incrementAvailability}\n      >\n        {availability || \"???\"}\n      </span>\n    </span>\n  );\n}\n\nfunction SettingsOverlay({\n  ingredientsAvailability,\n  setIngredientAvailability,\n  ingredientsFilterMode,\n  setIngredientsFilterMode,\n}: {\n  ingredientsAvailability: AvailabilitiesMap;\n  setIngredientAvailability: AvailabilitySetter;\n  ingredientsFilterMode: FilterMode;\n  setIngredientsFilterMode: FilterModeSetter;\n}) {\n  return (\n    <div\n      style={{\n        background: \"lightblue\",\n        padding: \"10px\",\n        position: \"fixed\",\n        top: \"10px\",\n        right: \"10px\",\n      }}\n    >\n      <h2>Settings</h2>\n\n      <h3>Filter mode</h3>\n\n      <select\n        value={ingredientsFilterMode}\n        onChange={(e) => setIngredientsFilterMode(e.target.value as FilterMode)}\n      >\n        <option value=\"all\">All cocktails</option>\n        <option value=\"only_yes\">Only with Yes</option>\n        <option value=\"yes_or_maybe\">Only with Yes or Maybe</option>\n      </select>\n\n      <h3>Ingredients available or not</h3>\n      {Object.entries(ingredientsAvailability).map(\n        ([ingredientName, availability]) => {\n          return (\n            <p key={ingredientName}>\n              <IngredientWithAvailability\n                ingredientName={ingredientName}\n                availability={availability}\n                setIngredientAvailability={setIngredientAvailability}\n              />\n            </p>\n          );\n        }\n      )}\n    </div>\n  );\n}\n\nfunction CocktailsTable({\n  cocktails,\n  ingredientsAvailability,\n  setIngredientAvailability,\n  ingredientsFilterMode,\n}: {\n  cocktails: Cocktail[];\n  ingredientsAvailability: AvailabilitiesMap;\n  setIngredientAvailability: AvailabilitySetter;\n  ingredientsFilterMode: FilterMode;\n}) {\n  return (\n    <div>\n      {cocktails\n        .filter(({ ingredients }) => {\n          if (ingredientsFilterMode === \"all\") return true;\n          return ingredients.every(({ ingredientName }) => {\n            const availability: Availability | null =\n              ingredientsAvailability[ingredientName] || null;\n            return (\n              availability === null ||\n              availability === \"yes\" ||\n              (availability === \"maybe\" &&\n                ingredientsFilterMode === \"yes_or_maybe\")\n            );\n          });\n        })\n        .map((cocktail) => {\n          return (\n            <CocktailCard\n              key={cocktail.name}\n              cocktail={cocktail}\n              ingredientsAvailability={ingredientsAvailability}\n              setIngredientAvailability={setIngredientAvailability}\n            />\n          );\n        })}\n    </div>\n  );\n}\n\nfunction persistIngredientsAvailability(\n  ingredientsAvailability: AvailabilitiesMap\n) {\n  localStorage.setItem(\n    \"availabilities\",\n    JSON.stringify(ingredientsAvailability)\n  );\n}\n\nfunction readIngredientsAvailabilityFromPersistence(): AvailabilitiesMap {\n  return JSON.parse(localStorage.getItem(\"availabilities\") || \"{}\");\n}\n\nexport function BigAppWrapper({ cocktails }: { cocktails: Cocktail[] }) {\n  const [ingredientsAvailability, setIngredientsAvailability] =\n    useState<AvailabilitiesMap>(readIngredientsAvailabilityFromPersistence());\n  const [ingredientsFilterMode, setIngredientsFilterMode] =\n    useState<FilterMode>(\"all\");\n\n  const setIngredientAvailability = useCallback(\n    (ingredientName, availability) => {\n      const newMap = {\n        ...ingredientsAvailability,\n        [ingredientName]: availability,\n      };\n      setIngredientsAvailability(newMap);\n      setTimeout(() => {\n        persistIngredientsAvailability(newMap);\n      }, 50);\n    },\n    [ingredientsAvailability]\n  );\n\n  const props = {\n    ingredientsAvailability,\n    setIngredientAvailability,\n    ingredientsFilterMode,\n    setIngredientsFilterMode,\n  };\n  return (\n    <div>\n      <SettingsOverlay {...props} />\n      <CocktailsTable cocktails={cocktails} {...props} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport db from \"../db.json\";\nimport { Cocktail } from \"../utils/types\";\nimport { BigAppWrapper } from \"./variousComponents\";\n\nfunction App() {\n  return <BigAppWrapper cocktails={db as Cocktail[]} />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/style.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}