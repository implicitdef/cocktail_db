{"version":3,"sources":["components/SettingsOverlay.tsx","utils/utils.ts","components/Alternatives.tsx","components/IngredientWithAvailability.tsx","components/CocktailCard.tsx","components/variousComponents.tsx","components/BigAppWrapper.tsx","utils/storage.ts","components/App.tsx","index.tsx"],"names":["SettingsOverlay","ingredientsFilterMode","setIngredientsFilterMode","style","background","padding","position","top","right","value","onChange","e","target","domain","split","reverse","join","flattenIngredientName","ingredientNameWithLinks","map","part","text","Alternatives","alternatives","length","color","IngredientWithAvailability","ingredientName","availability","setIngredientAvailability","incrementAvailability","useCallback","textDecoration","i","href","margin","borderRadius","cursor","backgroundColor","undefined","translateAvailabilityAsColor","onClick","CocktailCard","cocktail","ingredientsAvailability","maxWidth","height","float","src","imgSrc","alt","name","fontSize","marginLeft","url","rel","ingredients","amount","alternateIngredientsNames","CocktailsTable","cocktails","filter","every","BigAppWrapper","useState","JSON","parse","localStorage","getItem","setIngredientsAvailability","newMap","setTimeout","setItem","stringify","persistIngredientsAvailability","App","db","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25972cc2.chunk.js","sourcesContent":["import React from \"react\";\nimport { FilterMode, FilterModeSetter } from \"../utils/types\";\n\nexport function SettingsOverlay({\n  ingredientsFilterMode,\n  setIngredientsFilterMode,\n}: {\n  ingredientsFilterMode: FilterMode;\n  setIngredientsFilterMode: FilterModeSetter;\n}) {\n  return (\n    <div\n      style={{\n        background: \"lightblue\",\n        padding: \"10px\",\n        position: \"fixed\",\n        top: \"10px\",\n        right: \"10px\",\n      }}\n    >\n      <h2>Settings</h2>\n\n      <h3>Filter mode</h3>\n\n      <select\n        value={ingredientsFilterMode}\n        onChange={(e) => setIngredientsFilterMode(e.target.value as FilterMode)}\n      >\n        <option value=\"all\">All cocktails</option>\n        <option value=\"only_yes\">Only with Yes</option>\n        <option value=\"yes_or_maybe\">Only with Yes or Maybe</option>\n      </select>\n    </div>\n  );\n}\n","import { Availability, Ingredient } from \"./types\";\n\nexport function translateAvailabilityAsColor(availability: Availability) {\n  switch (availability) {\n    case \"no\":\n      return \"red\";\n    case \"maybe\":\n      return \"orange\";\n    case \"yes\":\n      return \"green\";\n    case null:\n    case undefined:\n      return \"gray\";\n  }\n}\n\nfunction reverse(s: string) {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n// eslint-disable-next-line no-useless-concat\nexport const domain = reverse(\"apliatkcoc\") + \"rtyapp.com\";\n\nexport function flattenIngredientName(\n  ingredientNameWithLinks: Ingredient[\"ingredientNameWithLinks\"]\n) {\n  return ingredientNameWithLinks\n    .map((part) => {\n      if (typeof part === \"string\") {\n        return part;\n      } else {\n        return part.text;\n      }\n    })\n    .join(\" \");\n}\n","import React from \"react\";\n\nexport function Alternatives({ alternatives }: { alternatives: string[] }) {\n  if (alternatives.length) {\n    return (\n      <span style={{ color: \"grey\" }}> (or {alternatives.join(\"/\")})</span>\n    );\n  }\n  return null;\n}\n","import React, { useCallback } from \"react\";\nimport { Availability, AvailabilitySetter, Ingredient } from \"../utils/types\";\nimport { domain } from \"../utils/utils\";\n\nexport function IngredientWithAvailability({\n  ingredientName,\n  ingredientNameWithLinks,\n  availability,\n  setIngredientAvailability,\n}: {\n  ingredientName: string;\n  ingredientNameWithLinks: Ingredient[\"ingredientNameWithLinks\"];\n  availability: Availability;\n  setIngredientAvailability: AvailabilitySetter;\n}) {\n  function translateAvailabilityAsColor() {\n    switch (availability) {\n      case \"no\":\n        return \"red\";\n      case \"maybe\":\n        return \"orange\";\n      case \"yes\":\n        return \"green\";\n      case null:\n      case undefined:\n        return \"gray\";\n    }\n  }\n\n  const incrementAvailability = useCallback(() => {\n    const newAvailability =\n      availability === \"no\" ? \"maybe\" : availability === \"maybe\" ? \"yes\" : \"no\";\n    setIngredientAvailability(ingredientName, newAvailability);\n  }, [ingredientName, availability, setIngredientAvailability]);\n\n  function buildIngredientUrl(href: string) {\n    return `https://${domain}/ingredients/${href}`;\n  }\n\n  return (\n    <span\n      style={{\n        textDecoration: availability === \"no\" ? \"line-through\" : \"initial\",\n      }}\n    >\n      {ingredientNameWithLinks.map((part, i) => {\n        const style = { margin: \"0 2px\" };\n        if (typeof part === \"string\") {\n          return (\n            <span style={style} key={part + i}>\n              {part}\n            </span>\n          );\n        }\n        return (\n          <a\n            style={style}\n            key={part.text + i}\n            href={buildIngredientUrl(part.href)}\n          >\n            {part.text}\n          </a>\n        );\n      })}\n      <span\n        style={{\n          padding: \"0 5px\",\n          margin: \"0 5px\",\n          borderRadius: \"5px\",\n          color: \"white\",\n          cursor: \"pointer\",\n          backgroundColor: translateAvailabilityAsColor(),\n        }}\n        onClick={incrementAvailability}\n      >\n        {availability || \"???\"}\n      </span>\n    </span>\n  );\n}\n","import React from \"react\";\nimport {\n  AvailabilitiesMap,\n  AvailabilitySetter,\n  Cocktail,\n} from \"../utils/types\";\nimport { domain, flattenIngredientName } from \"../utils/utils\";\nimport { Alternatives } from \"./Alternatives\";\nimport { IngredientWithAvailability } from \"./IngredientWithAvailability\";\n\nexport function CocktailCard({\n  cocktail,\n  ingredientsAvailability,\n  setIngredientAvailability,\n}: {\n  cocktail: Cocktail;\n  ingredientsAvailability: AvailabilitiesMap;\n  setIngredientAvailability: AvailabilitySetter;\n}) {\n  return (\n    <div\n      style={{\n        maxWidth: \"500px\",\n        background: \"#FFE\",\n        padding: \"5px\",\n        margin: \"5px\",\n      }}\n    >\n      <img\n        style={{ height: \"4rem\", float: \"right\" }}\n        src={`https://${domain}/${cocktail.imgSrc}`}\n        alt=\"\"\n      />\n      <h2 style={{ margin: 0 }}>\n        {cocktail.name}\n        <a\n          style={{ fontSize: \"0.9rem\", marginLeft: \"5px\" }}\n          href={`https://${domain}${cocktail.url}`}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          link\n        </a>\n      </h2>\n\n      <ul>\n        {cocktail.ingredients.map(\n          ({ amount, ingredientNameWithLinks, alternateIngredientsNames }) => {\n            const ingredientName = flattenIngredientName(\n              ingredientNameWithLinks\n            );\n            return (\n              <li key={ingredientName}>\n                {amount}{\" \"}\n                <IngredientWithAvailability\n                  ingredientName={ingredientName}\n                  ingredientNameWithLinks={ingredientNameWithLinks}\n                  availability={ingredientsAvailability[ingredientName]}\n                  setIngredientAvailability={setIngredientAvailability}\n                />\n                <Alternatives alternatives={alternateIngredientsNames} />\n              </li>\n            );\n          }\n        )}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  AvailabilitiesMap,\n  Availability,\n  AvailabilitySetter,\n  Cocktail,\n  FilterMode,\n} from \"../utils/types\";\nimport { flattenIngredientName } from \"../utils/utils\";\nimport { CocktailCard } from \"./CocktailCard\";\n\nexport function CocktailsTable({\n  cocktails,\n  ingredientsAvailability,\n  setIngredientAvailability,\n  ingredientsFilterMode,\n}: {\n  cocktails: Cocktail[];\n  ingredientsAvailability: AvailabilitiesMap;\n  setIngredientAvailability: AvailabilitySetter;\n  ingredientsFilterMode: FilterMode;\n}) {\n  return (\n    <div>\n      {cocktails\n        .filter(({ ingredients }) => {\n          if (ingredientsFilterMode === \"all\") return true;\n          return ingredients.every(({ ingredientNameWithLinks }) => {\n            const availability: Availability | null =\n              ingredientsAvailability[\n                flattenIngredientName(ingredientNameWithLinks)\n              ] || null;\n            return (\n              availability === null ||\n              availability === \"yes\" ||\n              (availability === \"maybe\" &&\n                ingredientsFilterMode === \"yes_or_maybe\")\n            );\n          });\n        })\n        .map((cocktail) => {\n          return (\n            <CocktailCard\n              key={cocktail.name}\n              cocktail={cocktail}\n              ingredientsAvailability={ingredientsAvailability}\n              setIngredientAvailability={setIngredientAvailability}\n            />\n          );\n        })}\n    </div>\n  );\n}\n","import React, { useCallback, useState } from \"react\";\nimport {\n  persistIngredientsAvailability,\n  readIngredientsAvailabilityFromPersistence,\n} from \"../utils/storage\";\nimport { AvailabilitiesMap, Cocktail, FilterMode } from \"../utils/types\";\nimport { SettingsOverlay } from \"./SettingsOverlay\";\nimport { CocktailsTable } from \"./variousComponents\";\n\nexport function BigAppWrapper({ cocktails }: { cocktails: Cocktail[] }) {\n  const [ingredientsAvailability, setIngredientsAvailability] =\n    useState<AvailabilitiesMap>(readIngredientsAvailabilityFromPersistence());\n  const [ingredientsFilterMode, setIngredientsFilterMode] =\n    useState<FilterMode>(\"all\");\n\n  const setIngredientAvailability = useCallback(\n    (ingredientName, availability) => {\n      const newMap = {\n        ...ingredientsAvailability,\n        [ingredientName]: availability,\n      };\n      setIngredientsAvailability(newMap);\n      setTimeout(() => {\n        persistIngredientsAvailability(newMap);\n      }, 50);\n    },\n    [ingredientsAvailability]\n  );\n\n  return (\n    <div>\n      <SettingsOverlay\n        {...{ ingredientsFilterMode, setIngredientsFilterMode }}\n      />\n      <CocktailsTable\n        cocktails={cocktails}\n        {...{\n          ingredientsAvailability,\n          setIngredientAvailability,\n          ingredientsFilterMode,\n          setIngredientsFilterMode,\n        }}\n      />\n    </div>\n  );\n}\n","import { AvailabilitiesMap } from \"./types\";\n\nexport function persistIngredientsAvailability(\n  ingredientsAvailability: AvailabilitiesMap\n) {\n  localStorage.setItem(\n    \"availabilities\",\n    JSON.stringify(ingredientsAvailability)\n  );\n}\n\nexport function readIngredientsAvailabilityFromPersistence(): AvailabilitiesMap {\n  return JSON.parse(localStorage.getItem(\"availabilities\") || \"{}\");\n}\n\n","import React from \"react\";\nimport db from \"../db.json\";\nimport { Cocktail } from \"../utils/types\";\nimport { BigAppWrapper } from \"./BigAppWrapper\";\n\nfunction App() {\n  return (\n    <div style={{ padding: \"30px\" }}>\n      <h1>Cocktails database</h1>\n      <BigAppWrapper cocktails={db as Cocktail[]} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/style.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}